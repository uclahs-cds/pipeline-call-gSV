import nextflow.util.SysHelper

manifest {
    name = 'call-gSV'
    mainScript = 'call-gSV.nf'
    nextflowVersion = '>=20.07.1'
    author = 'Yu Pan, Tim Sanders, Yael Berkovich'
    homePage = 'https://github.com/uclahs-cds/pipeline-call-gSV'
    description = 'A pipeline to call structural variants utilizing Delly and Manta'
    version = '4.0.0-rc1'
}

methods {
    set_docker_urls = {
        params.docker_image_delly = "blcdsdockerregistry/delly:${params.delly_version}"
        params.docker_image_bcftools = "blcdsdockerregistry/bcftools:${params.bcftools_version}"
        params.docker_image_manta = "blcdsdockerregistry/manta:${params.manta_version}"
        params.docker_image_rtgtools = "blcdsdockerregistry/rtg-tools:${params.rtgtools_version}"
        params.docker_image_vcftools = "blcdsdockerregistry/vcftools:${params.vcftools_version}"
        params.docker_image_validate = "blcdsdockerregistry/validate:${params.validate_version}"
        }

    check_permissions = { path ->
        def filePath = new File(path)

        if (filePath.exists()) {
            if (filePath.canWrite()) {
                return
                }
            throw new Exception("${path} is not writable")
            }

        // Attempts to create directory if the path does not exist
        if (!filePath.mkdirs()) {
            throw new Exception("${path} does not exist and could not create")
            }
        }

    set_log_output_dir = {
        def patient
        def sample

        // assumes that patient and samples name are in the pipeline.config
        def reader = new FileReader(params.input_csv)
        reader.splitEachLine(',') { parts -> [patient = parts[0], sample = parts[1]] }

        params.patient = "${patient}"
        params.sample = "${sample}"

        tz = TimeZone.getTimeZone('UTC')
        def date = new Date().format("yyyyMMdd'T'HHmmss'Z'", tz)

        params.dataset_registry_prefix = '/hot/data'
            
        if (params.blcds_registered_dataset == true) {
            if ("${params.dataset_id.length()}" != 11) {
                throw new Exception("Dataset id must be eleven characters long")
            }
            def disease = "${params.dataset_id.substring(0,4)}"
            params.log_output_dir = "${params.dataset_registry_prefix}/$disease/${params.dataset_id}/${patient}/${sample}/DNA/WGS/aligned/${params.reference_prefix}/log/call-gSV/$date"
            params.disease = "${disease}"
        } else {
            params.log_output_dir = "${params.output_dir}/${manifest.name}-${manifest.version}/${sample}/log-${manifest.name}-${manifest.version}-${date}"
            params.disease = null
        }
    }

    set_output_dir = {
        params.output_dir = "${params.output_dir}/${manifest.name}-${manifest.version}/${params.sample}"
        }

    // Process specific scope
    set_process = {
        // Monitor process jobs with local (not slurm) executor
        process.executor = "local"
    }
    // Location of Nextflow temp directories
    set_env = {
        workDir = params.temp_dir
    }

    // Pipeline monitoring and metric files
    set_timeline = {
        timeline.enabled = true
        timeline.file = "${params.log_output_dir}/nextflow-log/timeline.html"
    }

    set_trace = {
        trace.enabled = true
        trace.file = "${params.log_output_dir}/nextflow-log/trace.txt"
        }

    set_report = {
        report.enabled = true
        report.file = "${params.log_output_dir}/nextflow-log/report.html"
        }

    set_node_config = {
        def node_cpus = SysHelper.getAvailCpus()
        def node_mem  = SysHelper.getAvailMemory().getGiga()

        if (node_cpus == 2 && node_mem >= 3 && node_mem < 5) {
            includeConfig "${projectDir}/config/F2.config"
            }
        else if (node_cpus == 32 && node_mem >= 60 && node_mem < 70) {
            includeConfig "${projectDir}/config/F32.config"
            }
        else if (node_cpus == 72 && node_mem >= 130 && node_mem < 150) {
            includeConfig "${projectDir}/config/F72.config"
            }
        else if (node_cpus == 64 && node_mem >= 900 && node_mem < 1100) {
            includeConfig "${projectDir}/config/M64.config"
            }
        else {
            throw new Exception('ERROR: System resources not as expected, unable to assign resources.')
            }
        }

    // Set up env, timeline, trace, and report above.
    setup = {
        methods.set_docker_urls()
        methods.set_log_output_dir()
        methods.set_output_dir()
        methods.check_permissions(params.log_output_dir)

        methods.set_env()
        methods.set_process()
        methods.set_timeline()
        methods.set_trace()
        methods.set_report()
        methods.set_node_config()
        }
    }

methods.setup()

// Enable docker
docker {
    enabled = true
    // Pass user's UID/GID and group IDs to Docker
    uid_and_gid = "-u \$(id -u):\$(id -g)"
    all_group_ids = "\$(for i in `id --real --groups`; do echo -n \"--group-add=\$i \"; done)"

    runOptions = "${uid_and_gid} ${all_group_ids}"
    }
