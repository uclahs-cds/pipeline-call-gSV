methods {
    set_log_output_dir = {

        def patient = ${params.sample_name}
        def sample = ${params.input_bam}

        // assumes that patient and samples name are in the pipeline.config
        //def reader = new FileReader(params.input_csv)
        //reader.splitEachLine(',') { parts -> [patient = parts[0], sample = parts[1]] }

        def date = new Date().format('yyyyMMdd-HHMMss')
        if (params.sge_scheduler) {
              params.avere_prefix = '/data/data'
        } else {
              params.avere_prefix = '/hot/data'
        }

        if (params.blcds_registered_dataset == true) {
            if ("${params.dataset_id.length()}" != 11) {
                 throw new Exception("Dataset id must be eleven characters long")
            }
            def disease = "${params.dataset_id.substring(0,4)}"
            // Need to fill in analyte, technology, raw_od_aligned, genome, pipeline-name
            params.output_log_directory = "${params.avere_prefix}/$disease/${params.dataset_id}/${params.sample_name}/${params.input_bam}/analyte/technology,raw_or_aligned/genome/logs/pipeline-name/$date"
            params.disease = "${disease}"
        } else {
            def outputDir = new File(params.output_dir)
            if(!outputDir.exists()) {
                try {
                    if(! outputDir.mkdirs()) {
                        throw new Exception("${params.output_dir} does not exist and could not create.")
                    }
                } catch (SecurityException e) {
                    throw new Exception("${params.output_dir} does not exist and could not create.\n ${e.toString()}")
                }
            }
            if(outputDir.exists() && ! outputDir.canWrite()) {
                throw new Exception("${params.output_dir} is not writable. Exiting")
            }

            params.output_log_directory = "${params.output_dir}/$date/logs/"
            params.disease = null
        }
        //params.patient = "${patient}"
        //params.sample = "${sample}"
        params.date = "${date}"
    }
    
    // Process specific scope
    set_process = {
        executor = 'local'
    }

    // Location of Nextflow temporary directories
    set_env = {
        workDir = params.temp_dir
        NXF_WORK = params.temp_dir
        NXF_TEMP = params.temp_dir
        NXF_HOME = params.temp_dir
    }

    // Pipeline monitoring and metric files
    set_timeline {
        enabled = true
        file = "${params.output_log_dir}/timeline.html"
    }
    set_trace {
        enabled = true
        file = "${params.output_dir}/trace.txt"
    }
    set_report {
        enabled = true
        file = "${params.output_dir}/report.html"
    }
}

setup = {
    methods.set_log_output_dir()
    methods.set_process()
    methods.set_env()
    methods.set_timeline()
    methods.set_trace()
    methods.set_report()
}

methods.setup()

// Enable docker
docker {
    enabled = true
    sudo = false // Set to true if run on SGE
    runOptions = "-u \$(id -u):\$(id -g)"
}