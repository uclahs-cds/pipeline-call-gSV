class log_output_dir {
    static def check_permissions(path) {
      def filePath = new File(path)

      if (filePath.exists()) {
          if (filePath.canWrite()) {
              return
          }
          throw new Exception("${path} is not writable")
      }

      // Attempts to create directory if the path does not exist
      if (!filePath.mkdirs()) {
          throw new Exception("${path} does not exist and could not create")
      }
    }
}

methods {
    set_log_output_dir = {

        def patient
        def sample

        // assumes that patient and samples name are in the pipeline.config
        def reader = new FileReader(params.input_csv)
        reader.splitEachLine(',') { parts -> [patient = parts[0], sample = parts[1]] }

        def date = new Date().format('yyyyMMdd-HHMMss')
        if (params.sge_scheduler) {
              params.avere_prefix = '/data/data'
        } else {
              params.avere_prefix = '/hot/data'
        }

        if (params.blcds_registered_dataset == true) {
            if ("${params.dataset_id.length()}" != 11) {
                 throw new Exception("Dataset id must be eleven characters long")
            }
            def disease = "${params.dataset_id.substring(0,4)}"
            // Need to fill in analyte, technology, raw_od_aligned, genome, pipeline-name
            params.output_log_directory = "${params.avere_prefix}/$disease/${params.dataset_id}/${patient}/${sample}/analyte/technology,raw_or_aligned/genome/logs/pipeline-name/$date"
            params.disease = "${disease}"
        } else {
            params.output_log_directory = "${params.output_dir}/$date/logs/"
            params.disease = null
        }
        params.patient = "${patient}"
        params.sample = "${sample}"
        params.date = "${date}"
    }

  // Process specific scope
  set_process = {
    // Monitor process jobs with local (not slurm) executor
    process.executor = "local"
  }

  // Location of Nextflow temp directories
  set_env = {
    workDir = params.temp_dir
    NXF_WORK = params.temp_dir
    NXF_TEMP = params.temp_dir
    NXF_HOME = params.temp_dir
  }

  // Pipeline monitoring and metric files
  set_timeline = {
    timeline.enabled = true
    timeline.file = "${params.output_log_directory}/timeline.html"
  }
  set_trace = {
    trace.enabled = true
    trace.file = "${params.output_log_directory}/trace.txt"
  }
  set_report = {
    report.enabled = true
    report.file = "${params.output_log_directory}/report.html"
  }

  // Set up env, timeline, trace, and report above.
  setup = {
    methods.set_log_output_dir()
    log_output_dir.check_permissions(params.output_log_directory)
    methods.set_process()
    methods.set_env()
    methods.set_timeline()
    methods.set_trace()
    methods.set_report()
  }
}


methods.setup()

// Enable docker
docker {
    enabled = true
    sudo = false // Set to true if run on SGE
    runOptions = "-u \$(id -u):\$(id -g)"
}